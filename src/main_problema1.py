import tkinter as tk
from tkinter import filedialog
from problema1 import normalizar_cadena, encontrar_palindromos  # Se usa la funci√≥n principal

def seleccionar_archivo():
    """Abre un cuadro de di√°logo para que el usuario seleccione un archivo de texto."""
    root = tk.Tk()  # Inicializa una ventana oculta de tkinter
    root.withdraw()  # Oculta la ventana principal para que solo aparezca el di√°logo
    archivo_path = filedialog.askopenfilename(
        title="Selecciona un archivo de texto",
        filetypes=[("Archivos de texto", "*.txt")]  # Filtra para archivos de texto solamente
    )
    return archivo_path  # Retorna la ruta del archivo seleccionado

def ejecutar_algoritmos(archivo_path):
    """Lee el archivo y encuentra la subsecuencia palindr√≥mica m√°s larga en cada l√≠nea."""
    
    # Validar que se haya seleccionado un archivo
    if not archivo_path:
        print("‚ö† No se seleccion√≥ ning√∫n archivo.")
        return

    # Abrir el archivo en modo lectura y obtener las l√≠neas
    with open(archivo_path, 'r', encoding='utf-8') as archivo:
        lineas = archivo.readlines()  # Leer todas las l√≠neas del archivo
        n = int(lineas[0].strip())  # Primera l√≠nea del archivo indica el n√∫mero de cadenas a analizar

        # Validar que el n√∫mero de l√≠neas coincida con la cantidad esperada
        if len(lineas) - 1 < n:
            print("‚ö† Error: El n√∫mero de cadenas no coincide con las l√≠neas disponibles.")
            return

        # Iterar sobre cada l√≠nea para analizar los pal√≠ndromos
        for i in range(1, n + 1):  
            linea_normalizada = normalizar_cadena(lineas[i].strip())  # Limpia la cadena de espacios y caracteres especiales

            # Ejecuta los tres algoritmos para encontrar la subsecuencia palindr√≥mica m√°s larga
            resultados = encontrar_palindromos(linea_normalizada)

            # Imprimir los resultados en consola
            print(f"üîπ Fuerza Bruta: {resultados['bruta']}")  # Resultado del algoritmo de Fuerza Bruta
            print(f"üîπ Programaci√≥n Din√°mica: {resultados['din√°mica']}")  # Resultado del algoritmo Din√°mico
            print(f"üîπ Expansi√≥n desde el Centro (Voraz): {resultados['voraz']}")  # Resultado del algoritmo Voraz

# Ejecutar la selecci√≥n y an√°lisis de archivo al correr el script
if __name__ == "__main__":
    archivo = seleccionar_archivo()  # Abre el di√°logo de selecci√≥n de archivo
    ejecutar_algoritmos(archivo)  # Procesa el archivo seleccionado